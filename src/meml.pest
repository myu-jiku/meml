// meml â€“ XML replacement written in Rust with the pest library <https://pest.rs>.
// Developed to be used in ygo_destiny <https://github.com/myuujiku/ygo_destiny/>.
// Copyright (C) 2022  myujiku
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Spaces
WHITESPACE = _{ " " | "\t" | NEWLINE }
ws         = _{ WHITESPACE }
COMMENT    = _{
	("//" ~ (!NEWLINE ~ ANY)*) 
}
mute_block = _{ "{" ~ (!"}" ~ ANY)* ~ "}" }


// Object names
char      = _{ ASCII_ALPHANUMERIC | "_" | "-" }
name      = @{ char+ }
namespace = @{ (char+ ~ &":")? }


// Brackets
leb = _{ "{" }  // opening element bracket
reb = _{ "}" }  // closing element bracket
lab = _{ "(" }  // opening argument bracket
rab = _{ ")" }  // closing argument bracket


// Keywords
def_kw   = _{ "def" }
keyword  =  { def_kw }


// Quotes
sq       = _{ PUSH("\"" | "'") }
eq       = _{ POP }
qtext    =  { (!PEEK ~ !sconst ~ !sarg ~ !NEWLINE ~ ANY)+ }
sconst   =  { "$(" ~ name ~ ")" }
sarg     =  { "${" ~ name ~ "}" }
qcontent = ${ (qtext | sconst | sarg)* }
string   =  { sq ~ qcontent ~ eq }


// Defs
def_preamble      = _{ def_kw ~ ws ~ name }
def_colon         = _{  ws? ~ ":" ~ ws }
arg_names         =  { (ws* ~ name)+ }

string_const_def  = ${ def_preamble ~ def_colon ~ string }
element_const_def = ${ def_preamble ~ def_colon ~ element }
func_def          = ${
    def_preamble ~ ws? ~
    lab ~ ws? ~ arg_names ~ ws? ~ rab ~
   def_colon ~ element
}

def               = _{ string_const_def | element_const_def | func_def }


// Element components
attribute  = !{ name ~ ":" ~ string }
attributes = ${ (ws* ~ attribute)* }

const_use  = @{ name }
argument   = @{ string }
args       =  { (ws* ~ argument)+ }
func_use   =  { name ~ lab ~ args ~ rab }

child      = _{ element | func_use | const_use }
children   = ${ (ws* ~ child)* }

content    =  { string? }


// Element definition
element  = !{
    namespace ~ ":"? ~ name ~
    leb ~
    attributes ~
    children ~
    content ~
    reb
}


// File definition
meml = _{ SOI ~ (element | (&keyword ~ def) | mute_block)* ~ EOI }
